ARG PHP_EXTS="bcmath ctype fileinfo mbstring pdo pdo_mysql dom pcntl"
ARG PHP_PECL_EXTS="redis apcu"

# Composer base to reuse packages we've installed
FROM composer:2.5.4 AS composer_base

ARG PHP_EXTS
ARG PHP_PECL_EXTS

# Create the application directory
RUN mkdir -p /opt/app /opt/app/bin

# Set the working directory
WORKDIR /opt/app

# Create composer group and user
RUN addgroup -S composer \
    && adduser -S composer -G composer \
    && chown -R composer /opt/app \
    && apk add --virtual build-dependencies --no-cache ${PHPIZE_DEPS} openssl ca-certificates libxml2-dev oniguruma-dev \
    && docker-php-ext-install -j$(nproc) ${PHP_EXTS} \
    && pecl install ${PHP_PECL_EXTS} \
    && docker-php-ext-enable ${PHP_PECL_EXTS} \
    && apk del build-dependencies

# Install additional PHP extensions
RUN apk add --no-cache freetype-dev libjpeg-turbo-dev libpng-dev libzip-dev zlib-dev librdkafka-dev autoconf build-base
RUN docker-php-ext-configure gd --enable-gd --with-freetype --with-jpeg
RUN docker-php-ext-install gd

# Switch to composer user
USER composer

# Copy composer files
COPY --chown=composer composer.json composer.lock ./

# Install dependencies
RUN composer install --no-dev --no-scripts --no-autoloader --prefer-dist

# Copy actual source code
COPY --chown=composer . .

# Run install scripts
RUN composer install --prefer-dist

# FPM server container
FROM php:8.3-fpm-alpine AS fpm_server

ARG PHP_EXTS
ARG PHP_PECL_EXTS

WORKDIR /opt/app

# Install dependencies and PHP extensions
RUN apk add --virtual build-dependencies --no-cache ${PHPIZE_DEPS} openssl ca-certificates libxml2-dev oniguruma-dev \
    && docker-php-ext-install -j$(nproc) ${PHP_EXTS} \
    && pecl install ${PHP_PECL_EXTS} \
    && docker-php-ext-enable ${PHP_PECL_EXTS} \
    && apk del build-dependencies

ENV TZ=Asia/Tokyo

# Link the timezone info to system files
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone


RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
RUN apk add nginx
RUN docker-php-ext-install opcache

RUN apk add --no-cache supervisor

RUN mkdir -p /var/log/supervisor && chown -R www-data:www-data /var/log/supervisor

COPY ./docker/supervisor/conf.d/supervisord.conf /etc/supervisor/supervisord.conf
COPY ./docker/supervisor/conf.d/horizon.conf /etc/supervisor/conf.d/horizon.conf
COPY ./docker/supervisor/conf.d/laravel-worker.conf /etc/supervisor/conf.d/laravel-worker.conf

# OPCache configuration
ENV PHP_OPCACHE_VALIDATE_TIMESTAMPS="1"
ADD ./docker/php/conf.d/opcache.ini "$PHP_INI_DIR/conf.d/opcache.ini"

RUN touch laravel.cron && echo "* * * * * cd /opt/app && php artisan schedule:run >> /dev/null 2>&1" >> laravel.cron && crontab laravel.cron

# Make FPM log script executable
COPY ./docker/fpm_log_file_created.sh /etc/fpm_log_file_created.sh
RUN chmod +x /etc/fpm_log_file_created.sh
RUN /etc/fpm_log_file_created.sh

# Entrypoint script
COPY ./docker/entrypoint_production.sh /etc/entrypoint.sh
RUN chmod +x /etc/entrypoint.sh

RUN chown -R www-data:www-data /var/lib/nginx/ /var/log/nginx/ /var/run/
RUN ln -sf /proc/1/fd/1 /var/log/nginx/access.log \
    && ln -sf /proc/1/fd/1 /var/log/nginx/error.log

# Install additional packages
RUN apk add --no-cache freetype-dev libjpeg-turbo-dev libpng-dev libzip-dev zlib-dev autoconf build-base
RUN apk add vim vim-doc vim-tutor

USER www-data

# Copy app code base and configs
COPY --from=composer_base --chown=www-data /opt/app /opt/app
COPY ./docker/php/production.ini /usr/local/etc/php/conf.d/production.ini
COPY ./docker/php/php.ini /usr/local/etc/php/conf.d/prod.ini
COPY ./docker/php/conf.d/www.production.conf /usr/local/etc/php-fpm.d/www.conf
COPY ./docker/nginx/conf.d/nginx.conf /etc/nginx/nginx.conf
COPY ./docker/nginx/conf.d/nginx-prod.conf /etc/nginx/sites-enabled/default

EXPOSE 8080

USER root
RUN chown -R www-data:www-data /opt/app

ENTRYPOINT ["/etc/entrypoint.sh"]
